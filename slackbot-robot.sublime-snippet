<snippet>
    <content>
<![CDATA[
package robots
import (
    "encoding/json"
    "flag"
    "path/filepath"
    "io/ioutil"
    "log"
    "os"
)
type ${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}}Bot struct {
}

type $1Configuration struct {
}

var $1Config = new($1Configuration)

// Loads the config file and registers the bot with the server for command /${1/(.+)/\L\1/g}.
func init() {
    flag.Parse()
    configFile := filepath.Join(*ConfigDirectory, "${1/(.+)/\L\1/g}.json")
    if _, err := os.Stat(configFile); err == nil {
        config, err := ioutil.ReadFile(configFile)
        if err != nil {
            log.Printf("ERROR: Error opening ${1/(.+)/\L\1/g} config: %s", err)
            return
        }
        err = json.Unmarshal(config, $1Config)
        if err != nil {
            log.Printf("ERROR: Error parsing ${1/(.+)/\L\1/g} config: %s", err)
            return
        }
    } else {
        log.Printf("WARNING: Could not find configuration file ${1/(.+)/\L\1/g}.json in %s", *ConfigDirectory)
    }
    RegisterRobot("${1/(.+)/\L\1/g}", new($1Bot))
}

// All Robots must implement a Run command to be executed when the registered command is received.
func (r $1Bot) Run(p *Payload) (string) {
    // If you (optionally) want to do some asynchronous work (like sending API calls to slack)
    // you can put it in a go routine like this
    go r.DeferredAction(p)
    // The string returned here will be shown only to the user who executed the command
    // and will show up as a message from slackbot.
    return "Text to be returned only to the user who made the command."
}

func (r $1Bot) DeferredAction(p *Payload) {
    // Let's use the IncomingWebhook struct defined in definitions.go to form and send an
    // IncomingWebhook message to slack that can be seen by everyone in the room. You can
    // read the Slack API Docs (https://api.slack.com/) to know which fields are required, etc.
    // You can also see what data is available from the command structure in definitions.go
    response := &IncomingWebhook{
        Channel:     p.ChannelID,
        Username:    "$1 Bot",
        Text:        "Hi there!",
        IconEmoji:   ":ghost:",
        UnfurlLinks: true,
        Parse:       ParseStyleFull,
    }
    MakeIncomingWebhookCall(response)
}

func (r $1Bot) Description() (description string) {
    // In addition to a Run method, each Robot must implement a Description method which
    // is just a simple string describing what the Robot does. This is used in the included
    // /c command which gives users a list of commands and descriptions
    return "This is a description for $1Bot which will be displayed on /c"
}]]>
    </content>
    <scope>source.go</scope>
    <description>Slackbot Robot: Inserts a Slackbot Robot template based on the current filename.</description>
</snippet>
